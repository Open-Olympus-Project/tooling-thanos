image:
  repository: quay.io/thanos/thanos
  tag: v0.17.1
  pullPolicy: IfNotPresent

querytls:
    enabled: false
    # Labels to treat as a replica indicator along which data is deduplicated.
    # Still you will be able to query without deduplication using 'dedup=false' parameter.
    replicaLabels: []
    # - replica
    # - prometheus_replica
    #
    # Enable --query.auto-downsampling option for query.
    autoDownsampling: true
    # Prefix for API and UI endpoints. This allows thanos UI to be served on a sub-path.
    # This option is analogous to --web.route-prefix of Promethus.
    webRoutePrefix: ""
    # Static prefix for all HTML links and redirect
    #  URLs in the UI query web interface. Actual
    #  endpoints are still served on / or the
    #  web.route-prefix. This allows thanos UI to be
    #  served behind a reverse proxy that strips a URL
    #  sub-path.
    webExternalPrefix: ""
    # Name of HTTP request header used for dynamic prefixing of UI links and redirects.
    # This option is ignored if web.external-prefix argument is set. Security risk: enable this
    # option only if a reverse proxy in front of thanos is resetting the header. The --web.prefix-header=X-Forwarded-Prefix option
    # can be useful, for example, if Thanos UI is served via Traefik reverse proxy with PathPrefixStrip option enabled, which sends the
    # stripped prefix value in X-Forwarded-Prefix header. This allows thanos UI to be served on a sub-path
    webPrefixHeader: ""
    # https://github.com/improbable-eng/thanos/issues/1015
    storeDNSResolver: miekgdns
    # Enable DNS discovery for stores
    storeDNSDiscovery: true
    # Enable DNS discovery for sidecars (this is for the chart built-in sidecar service)
    sidecarDNSDiscovery: true
    # Enable DNS discovery for queries
    ruleDNSDiscovery: false
    # Addresses of statically configured store API servers (repeatable).
    # The scheme may be prefixed with 'dns+' or 'dnssrv+' to detect store API servers through respective DNS lookups.
    stores: 
    #  - "dnssrv+_grpc._tcp.<service>.<namespace>.svc.cluster.local"
    #
    # Path to files that contains addresses of store API servers. The path can be a glob pattern (repeatable).
    serviceDiscoveryFiles: []
    # Names of configmaps that contain addresses of store API servers, used for file service discovery.
    serviceDiscoveryFileConfigMaps: []
    # Refresh interval to re-read file SD files. It is used as a resync fallback.
    serviceDiscoveryInterval: 5m
    # Log filtering level.
    logLevel: info
    # Log format to use. Possible options: logfmt or json.
    logFormat: logfmt
    # Add extra environment variables to query
    extraEnv: []
    # - name: ENV
    #   value: value
    #
    # Add extra arguments to the query service
    extraArgs: []
    # - "--extraargs=extravalue"
    #
    # Number of replicas running from query component
    replicaCount: 1
    # Kubernetes deployment strategy object as documented in https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    strategy: {}
    # Enable HPA for query component
    autoscaling:
      enabled: false
      minReplicas: 2
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    # Enable podDisruptionBudget for query component
    podDisruptionBudget:
      enabled: false
        # minAvailable and maxUnavailable can't be used simultaneous. Choose one.
      minAvailable: 1
      #  maxUnavailable: 50%

    # The grpc endpoint to communicate with other components
    grpc:
      # grpc listen port number
      port: 10901
      # Service definition for query grpc service
      service:
        # Annotations to query grpc service
        annotations: {}
        # Labels to query grpc service
        labels: {}
        # Match labels for service selector
        matchLabels: {}
      # Set up ingress for the grpc service
      ingress:
        enabled: false
        # Set default backend for ingress
        defaultBackend: false
        annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
        labels: {}
        path: "/"
        hosts:
          - "/"
        tls: []
        #  - secretName: chart-example-tls
        #    hosts:
        #      - chart-example.local
    serviceAccount: ""

    psp:
      enabled: false
    rbac:
      enabled: false

    # The http endpoint to communicate with other components
    http:
      # http listen port number
      port: 10902
      # Service definition for query http service
      service:
        type: ClusterIP
        # Annotations to query http service
        annotations: 
          prometheus.io/scrape: "true"
        # Labels to query http service
        labels: {}
        # Match labels for service selector
        matchLabels: {}
      # Set up ingress for the http service
      ingress:
        enabled: false
        # Set default backend for ingress
        defaultBackend: false
        annotations:
        labels: {}
        
        paths:
        - /

        hosts: []
          # - "example.com"
        tls: []
        #  - secretName: chart-example-tls
        #    hosts:
        #      - chart-example.local

    certSecretName: ""
    # Extra labels for query pod template
    labels: {}
    #  cluster: example
    #
    # Extra annotations for query pod template
    annotations: {}
    #  example.com: default
    #
    # Add extra labels to query deployment
    deploymentLabels: {}
    #  extraLabel: extraLabelValue
    #
    # Add extra annotations to query deployment
    deploymentAnnotations: {}
    #  extraAnnotation: extraAnnotationValue
    #
    # Add extra selector matchLabels to query deployment
    deploymentMatchLabels: {}
    #
    # Enable metrics collecting for query service
    metrics:
      # This is the Prometheus annotation type scraping configuration
      annotations:
        enabled: true
      # Enable ServiceMonitor https://github.com/coreos/prometheus-operator
      serviceMonitor:
        enabled: false  
        # Labels for prometheus-operator to find servicemonitor
        labels: {}

    # Optional securityContext
    securityContext: {}
    resources: {}
    #  limits:
    #    cpu: 2000m
    #    memory: 16Gi
    #  requests:
    #    cpu: 1000m
    #    memory: 4Gi
    #
    # Node tolerations for server scheduling to nodes with taints
    # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    tolerations: []
    # - key: "key"
    #   operator: "Equal|Exists"
    #   value: "value"
    #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"
    #
    # Node labels for query pod assignment
    # Ref: https://kubernetes.io/docs/user-guide/node-selection/
    #
    nodeSelector: {}
    #
    # Pod affinity
    # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
    affinity: {}

# thanos: